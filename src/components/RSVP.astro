---
import '../styles/components/rsvp.scss';

https://docs.astro.build/en/recipes/build-forms/
---

<section id="rsvp" class="rsvp gutter">
  <h2 class="headline">RSVP</h2>
  <div class="text-container font-base">
    <p>Please RSVP by November 15th:</p>
    <form-rsvp data-guests={[]}>
      <button data-start-btn type="button" class="btn">Let us know!</button>

      <form method="POST" class="hidden">
        <div data-fieldset-step-1>
          <input type="text" name="firstName" placeholder="First Name" required />
          <input type="text" name="lastName" placeholder="Last Name" required />
        </div>

        <div data-fieldset-step-2 class="hidden">
          <fieldset>
            <legend>Can you join us?</legend>
            <p>
              <input type="radio" name="rsvp" id="rsvp_yes" value="Yes" />
              <label for="rsvp_yes">Yes, I'll be there!</label>
            </p>
            <p>
              <input type="radio" name="rsvp" id="rsvp_no" value="No" />
              <label for="rsvp_no">Sadly, I can't make it.</label>
            </p>
          </fieldset>          
        </div>

        <div data-fieldset-step-3 class="hidden">
          <fieldset>
            <legend>Meal Preference</legend>
            <p>
              <input type="radio" name="meal" id="meal_chicken" value="Chicken" />
              <label for="meal_chicken">Chicken</label>
            </p>
            <p>
              <input type="radio" name="meal" id="meal_falafel" value="Falafel" />
              <label for="meal_falafel">Falafel</label>
            </p>
            <p>
              <input type="radio" name="meal" id="meal_veggies" value="Veggies" />
              <label for="meal_veggies">Grilled Veggies</label>
            </p>
            <p>
              <input type="radio" name="meal" id="meal_gyro" value="Gyro" />
              <label for="meal_gyro">Gyro</label>
            </p>
            <p>
              <input type="radio" name="meal" id="meal_tri_tip" value="Tri-Tip" />
              <label for="meal_tri_tip">Tri-Tip</label>
            </p>
          </fieldset>

          <fieldset>
            <legend>Dietary Restrictions</legend>
            <p>
              <label for="dietary_restrictions">Please let us know if you have any dietary restrictions below.</label>
              <textarea name="dietary_restrictions" id="dietary_restrictions" rows="4"></textarea>
            </p>
          </fieldset>

          <fieldset>
            <legend>Song Request</legend>
            <p>
              <label for="song_title">Song Title</label>
              <br />
              <input type="text" name="song_title" id="song_title" value="" />
            </p>
            <p>
              <label for="song_artist">Artist</label>
              <br />
              <input type="text" name="song_artist" id="song_artist" value="" />
            </p>
          </fieldset>

          <fieldset>
            <legend>Shuttle to McCarthy's</legend>
            <p>
              <input type="radio" name="shuttle" id="shuttle_yes" value="Yes" />
              <label for="shuttle_yes">Yes, I need a ride after the reception!</label>
            </p>
            <p>
              <input type="radio" name="shuttle" id="shuttle_maybe" value="Maybe" />
              <label for="shuttle_maybe">Maybe</label>
            </p>
            <p>
              <input type="radio" name="shuttle" id="shuttle_no" value="No" />
              <label for="shuttle_no">I've gotta get to bed!</label>
            </p>
          </fieldset>

          <fieldset>
            <legend>Sunday Picnic</legend>
            <p>
              <input type="radio" name="picnic" id="picnic_yes" value="Yes" />
              <label for="picnic_yes">Yes</label>
            </p>
            <p>
              <input type="radio" name="picnic" id="picnic_maybe" value="Maybe" />
              <label for="picnic_maybe">Maybe</label>
            </p>
            <p>
              <input type="radio" name="picnic" id="picnic_no" value="No" />
              <label for="picnic_no">No</label>
            </p>
          </fieldset>
        </div>

        <button data-continue-btn type="button" class="btn">Continue</button>
        <button data-submit-btn disabled type="submit" class="btn hidden">Submit</button>
      </form>

      <div data-status-message class="hidden">Loading...</div>
    </form-rsvp>
  </div>
</section>

<script>
  class FormRSVP extends HTMLElement {
    guests: {
      id: string;
      firstName: string;
      lastName: string;
    }[] = [];

    state = {
      guestEntry: {},
      firstNameInput: '',
      lastNameInput: '',
      step: 1,
    };

    $form: HTMLFormElement | null = null;
    $fieldsetStep1: HTMLFieldSetElement | null = null;
    $fieldsetStep2: HTMLFieldSetElement | null = null;
    $fieldsetStep3: HTMLFieldSetElement | null = null;
    $buttonStart: HTMLButtonElement | null = null;
    $buttonContinue: HTMLButtonElement | null = null;
    $buttonSubmit: HTMLButtonElement | null = null;
    $inputFirstName: HTMLInputElement | null = null;
    $inputLastName: HTMLInputElement | null = null;
    $inputRsvpYes: HTMLInputElement | null = null;
    $inputRsvpNo: HTMLInputElement | null = null;
    $messageStatus: HTMLDivElement | null = null;

    connectedCallback() {
      this.init().layout().enable();
    }

    init () {
      return this;
    }

    layout() {
      this.$form = this.querySelector('form');
      this.$fieldsetStep1 = this.querySelector('[data-fieldset-step-1]');
      this.$fieldsetStep2 = this.querySelector('[data-fieldset-step-2]');
      this.$fieldsetStep3 = this.querySelector('[data-fieldset-step-3]');
      this.$buttonStart = this.querySelector('[data-start-btn]');
      this.$buttonContinue = this.querySelector('[data-continue-btn]');
      this.$buttonSubmit = this.querySelector('[data-submit-btn]');
      this.$inputFirstName = this.querySelector('input[name="firstName"]');
      this.$inputLastName = this.querySelector('input[name="lastName"]');
      this.$inputRsvpYes = this.querySelector('input#rsvp_yes');
      this.$inputRsvpNo = this.querySelector('input#rsvp_no');
      this.$messageStatus = this.querySelector('[data-status-message]');

      return this;
    }

    enable() {
      this.$form?.addEventListener('submit', this.handleSubmit);
      this.$buttonStart?.addEventListener('click', this.handleStart);
      this.$buttonContinue?.addEventListener('click', this.handleContinue);
      this.$inputRsvpYes?.addEventListener('change', this.handleRsvpChange);
      this.$inputRsvpNo?.addEventListener('change', this.handleRsvpChange);

      return this;
    }

    async fetchGuests() {
      try {
        const response = await fetch(`/api/guests/index.json`);

        if (!response.ok) {
          throw new Error(response.statusText);
        }

        return await response.json();
      } catch (error) {
        console.error({ error });
      }
    }

    handleContinue = (e: Event) => {
      e.preventDefault();

      const firstName = this.$inputFirstName?.value || null;
      const lastName = this.$inputLastName?.value || null;

      if (!firstName || !lastName) {
        if (this.$messageStatus) {
          this.$messageStatus.textContent = `Please enter both your first and last name.`;
          this.$messageStatus.classList.remove('hidden');
        }

        this.$inputFirstName?.focus();

        return;
      }

      /**
       * Validate guest name against fetched guest list.
       */
      // if (this.state.firstNameInput !== firstName || this.state.lastNameInput !== lastName) {
      //   const [guest] = this.guests.filter(guest => (
      //     this.sanitizeName(guest.firstName) === this.sanitizeName(firstName) &&
      //     this.sanitizeName(guest.lastName) === this.sanitizeName(lastName)
      //   )) || [];

      //   if (guest) {
      //     this.state.guestEntry = guest;
      //   } else {
      //     if (this.$messageStatus) {
      //       this.$messageStatus.textContent = `Sorry, that name doesn't appear to be on the guest list. Please contact Karly or JT if this is a mistake.`;
      //       this.$messageStatus.classList.remove('hidden');
      //     }

      //     return;
      //   }
      // }

      this.$messageStatus?.classList.add('hidden');
      
      /**
       * Determine which step of the form to show next.
       */
      if (this.state.guestEntry) {
        /**
         * Show RSVP "Yes" or "No" fieldset
         */
        if (this.state.step === 1) {
          this.$fieldsetStep1?.classList.add('hidden');
          this.$fieldsetStep2?.classList.remove('hidden');
          this.$buttonContinue?.setAttribute('disabled', 'true');
        }

        /**
         * Show remaining form inputs and submit button if RSVP is "Yes"
         */
        if (this.state.step === 2) {
          // TODO: populate form with guest info from this.state.guestEntry

          this.$buttonContinue?.remove();
          this.$fieldsetStep1?.classList.add('hidden');
          this.$fieldsetStep2?.classList.add('hidden');
          this.$fieldsetStep3?.classList.remove('hidden');
          this.$buttonSubmit?.classList.remove('hidden');
          this.$buttonSubmit?.removeAttribute('disabled');
        }
      }
    };

    handleRsvpChange = (e: Event) => {
      e.preventDefault();

      this.state.step = 2;

      if (this.$inputRsvpYes?.checked) {
        this.$buttonContinue?.classList.remove('hidden');
        this.$buttonContinue?.removeAttribute('disabled');
        this.$buttonSubmit?.classList.add('hidden');
      }
      
      if (this.$inputRsvpNo?.checked){
        this.$buttonContinue?.classList.add('hidden');
        this.$buttonSubmit?.classList.remove('hidden');
        this.$buttonSubmit?.removeAttribute('disabled');
      }
    };

    /**
     * Fetch guest names on "RSVP" button click,
     * then determine if guest can continue to form.
     */
    handleStart = async (e: Event) => {
      e.preventDefault();

      this.$buttonStart?.remove();

      if (this.$messageStatus) {
        this.$messageStatus.textContent = 'Loading...';
        this.$messageStatus.classList.remove('hidden');
      }

      try {
        this.guests = await this.fetchGuests() || [];

        if (this.guests.length) {
          this.$form?.classList.remove('hidden');
          this.$messageStatus?.classList.add('hidden');
        } else {
          // Show form inputs, send values via a node mailer
        }

        console.log(this.$form, this.$messageStatus);
      } catch (error) {
        console.error(error);
      }
    };

    /**
     * Collect all form data into an object
     */
    collectFormData() {
      if (!this.$form) return {};

      const formData = new FormData(this.$form);
      const data: Record<string, string> = {};

      // Collect basic form fields
      for (const [key, value] of formData.entries()) {
        data[key] = value as string;
      }

      // Handle song fields (combine title and artist)
      const songTitle = data.song_title || '';
      const songArtist = data.song_artist || '';
      
      if (songTitle || songArtist) {
        data.song = `${songTitle}${songArtist ? ` by ${songArtist}` : ''}`.trim();
      }

      return data;
    }

    /**
     * Handle form submission
     */
    handleSubmit = async (e: Event) => {
      e.preventDefault();

      if (this.$messageStatus) {
        this.$messageStatus.textContent = 'Submitting your RSVP...';
        this.$messageStatus.classList.remove('hidden');
      }

      try {
        const formData = this.collectFormData();
        
        const response = await fetch('/api/rsvp/index.json', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData),
        });

        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || response.statusText);
        }

        const data = await response.json();
        console.log('RSVP submitted successfully:', data);

        this.$form?.remove();

        if (this.$messageStatus) {
          this.$messageStatus.classList.remove('hidden');
          this.$messageStatus.textContent = 'Thank you for your RSVP!';
        }

      } catch (error) {
        console.error('Error submitting RSVP:', error);
        
        if (this.$messageStatus) {
          this.$messageStatus.classList.remove('hidden');
          this.$messageStatus.textContent = 'Sorry, there was an error submitting your RSVP. Please try again.';
        }
      }

      const $section = document.getElementById('rsvp');
      $section?.scrollIntoView({ behavior: 'smooth' });
    };

    sanitizeName(name: string) {
      if (!name) {
        return '';
      }
    
      return name.trim().toLowerCase().replace(/\s+/g, '');
    }
  }

  customElements.define('form-rsvp', FormRSVP);
</script>